///////////////////////////////////////////////////////////////// CONFIGURATION
 
archivesBaseName = 'ttc-term-suite'

ext.jcasFile = 'resources/eu/project/ttc/types/TermSuiteTypeSystem.xml'
apply from: "../jcasgen.gradle"

clean.doLast {
    project.delete (fileTree(dir: 'src/main/java/dictanova'))
    println 'Cleaning typesystem generated sources.'
}

////////////////////////////////////////////////////////////////// DEPENDENCIES
 
dependencies {
	// External
	compile libraries.uimaj_core
	compile libraries.uimaj_cpe
	compile libraries.uimaj_doc
    compile libraries.commons_lang
    compile libraries.commons_cli
    compile libraries.commons_io
    prepare libraries.uimaj_tools // jcasgen
    runtime 'org.annolab.tt4j:org.annolab.tt4j:1.1.1' // FIXME why necessary ?

	// Projects
	compile project(':uima-catcher')
	compile project(':uima-tree-tagger-wrapper')
	compile project(':uima-pattern-matcher')
	compile project(':uima-tokenizer')
	compile project(':uima-filter')
	compile project(':uima-contextualizer')
	compile project(':uima-mapper')
	compile project(':uima-chinese-segmenter')
	compile project(':uima-stemmer')
    compile project(':uima-indexer')
}

////////////////////////////////////////////////////////////// SPECIFIC TASKS

jar {
	// make it fat
    dependsOn configurations.runtime
	from( configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } ) {
        exclude "META-INF/*"
    }
	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": project.ext.name,
			"Implementation-Version": version,
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date(),
            "Built-JDK": System.getProperty('java.version'),
			"Main-Class": "eu.project.ttc.tools.TermSuite")
    }
}

clean.doLast {
    project.delete (fileTree(dir: 'sources/eu/project/ttc/types'))
    project.delete (fileTree(dir: 'sources/org')) // org.apache.uima.examples
    println 'Cleaning typesystem generated sources.'
}