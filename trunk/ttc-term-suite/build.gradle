///////////////////////////////////////////////////////////////// CONFIGURATION
 
archivesBaseName = 'ttc-term-suite'

ext.jcasFile = 'resources/eu/project/ttc/types/TermSuiteTypeSystem.xml'

configurations {
    prepare.extendsFrom(compile)
}

////////////////////////////////////////////////////////////////// DEPENDENCIES
 
dependencies {
	// External
	compile libraries.uimaj_core
	compile libraries.uimaj_cpe
	compile libraries.uimaj_doc
    compile libraries.commons_lang
    compile libraries.commons_cli
    compile libraries.commons_io
    prepare libraries.uimaj_tools // jcasgen

	// Projects
	compile project(':uima-catcher')
	compile project(':uima-tree-tagger-wrapper')
	compile project(':uima-pattern-matcher')
	compile project(':uima-tokenizer')
	compile project(':uima-filter')
	compile project(':uima-contextualizer')
	compile project(':uima-mapper')
	compile project(':uima-chinese-segmenter')
	compile project(':uima-stemmer')
    compile project(':uima-indexer')
}

////////////////////////////////////////////////////////////// SPECIFIC TASKS

jar {
	// make it fat
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": project.ext.name,
			"Implementation-Version": version,
			"Main-Class": "eu.project.ttc.tools.TermSuite")
    }
}

clean.doLast {
    project.delete (fileTree(dir: 'sources/eu/project/ttc/types'))
    project.delete (fileTree(dir: 'sources/org')) // org.apache.uima.examples
    println 'Cleaning typesystem generated sources.'
}

//////////////////////////////////////////////////////////////////
// JCASGEN
// Author: Damien Raude-Morvan
// Copyright (c) 2013 Dictanova. All rights reserved.
//
// Generate UIMA type system
//////////////////////////////////////////////////////////////////

task jcasgen(type: JavaExec) {
    description = 'Generate UIMA TS classes'
    ext.srcFile = file("$projectDir/$project.jcasFile")
    ext.outputDir = file("$projectDir/sources")
    inputs.file srcFile
    outputs.dir outputDir
    classpath configurations.prepare
    // This ensures availability of type system imports
    // however, assumes that files are in desc subfolder
    systemProperty 'uima.datapath', "$projectDir/desc"
    main = 'org.apache.uima.tools.jcasgen.Jg'
    args = ['-jcasgeninput', srcFile, '-jcasgenoutput', outputDir]
}

// UIMA type system is needed for Java compile
compileJava.source jcasgen.outputs, sourceSets.main.java